---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  Create Security Groups for the AEM Stack

Parameters:

  ComputeStackPrefixParameter:
    Type: String
    Description: The AEM Stack Compute Resources Stack Prefix

  NetworkStackPrefixParameter:
    Type: String
    Description: The AEM Stack Network Resources Stack Prefix

  SecureShellInboundCidrIpParameter:
    Type: String
    Description: AEM Stack Secure Shell Inbound Cidr Ip

  PublishDispatcherELBSecurityGroupInboundCidrIpParameter:
    Type: String
    Description: AEM Publish Dispatcher ELB Security Group Inbound Cidr Ip

  AuthorDispatcherELBSecurityGroupInboundCidrIpParameter:
    Type: String
    Description: AEM Author Dispatcher ELB Security Group Inbound Cidr Ip

  AuthorPublishDispatcherSecurityGroupInboundCidrIpParameter:
    Type: String
    Description: AEM Author Dispatcher ELB Security Group Inbound Cidr Ip

  PrivateSubnetInternetOutboundCidrIpParameter:
    Type: String
    Description: AEM Stack Private Subnet Internet Outbound Cidr Ip Destination

Resources:

  # Author Publish Dispatcher Security Group
  AuthorPublishDispatcherSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Author Publish Dispatcher Security Group
      Tags:
      - Key: Name
        Value: AEM Author Publish Dispatcher Security Group
      - Key: StackPrefix
        Value:
          Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound on ports 80
  AuthorPublishDispatcherSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: AuthorPublishDispatcherSecurityGroupInboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: AuthorPublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  # Allow tcp inbound on ports 443
  AuthorPublishDispatcherSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: AuthorPublishDispatcherSecurityGroupInboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: AuthorPublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp inbound on ports 4502, 4503
  AuthorPublishDispatcherSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: AuthorPublishDispatcherSecurityGroupInboundCidrIpParameter
      FromPort: '4502'
      GroupId:
        Ref: AuthorPublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'

  # Allow tcp inbound on ports 5432, 5433
  AuthorPublishDispatcherSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: AuthorPublishDispatcherSecurityGroupInboundCidrIpParameter
      FromPort: '5432'
      GroupId:
        Ref: AuthorPublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'


  # Publish Dispatcher ELB Security Group
  PublishDispatcherELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Publish Dispatcher ELB Security Group
      Tags:
        - Key: Name
          Value: AEM Publish Dispatcher ELB Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Publish Dispatcher ELB Security Group Cidr IP on ports 80 and 443
  PublishDispatcherELBSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: PublishDispatcherELBSecurityGroupInboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: PublishDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishDispatcherELBSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: PublishDispatcherELBSecurityGroupInboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: PublishDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound on 80 and 443 to Publish Dispatcher Security Group
  PublishDispatcherELBSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: PublishDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishDispatcherELBSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: PublishDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '443'


  # Publish Dispatcher Security Group
  PublishDispatcherSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Publish Dispatcher Security Group
      Tags:
        - Key: Name
          Value: AEM Publish Dispatcher Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Publish Dispatcher ELB Security Group on ports 80 and 443
  PublishDispatcherSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: PublishDispatcherELBSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishDispatcherSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: PublishDispatcherELBSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp inbound from Publish Security Group on ports 80 and 443
  PublishDispatcherSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishDispatcherSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp inbound from Secure Shell Cidr on port 22
  PublishDispatcherSecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: '22'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '22'

  # Allow tcp outbound on 4503 and 5433 to Publish Security Group
  PublishDispatcherSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '4503'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'
  PublishDispatcherSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '5433'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'

  # Allow tcp outbound on port 80 and 443 (http and https) to specified cidr ip required to download user data init script
  PublishDispatcherSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishDispatcherSecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: PublishDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Publish Security Group
  PublishSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Publish Security Group
      Tags:
        - Key: Name
          Value: AEM Publish Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Publish Dispatcher Security Group on 4503 and 5433
  PublishSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: '4503'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'
  PublishSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: '5433'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'

  # Allow tcp inbound from Author Security Group on 4503 and 5433
  PublishSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '4503'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'
  PublishSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '5433'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'

  # Allow tcp inbound from Secure Shell Cidr on port 22
  PublishSecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: '22'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '22'

  # Allow tcp inbound from Orchestrator Security Group on 4503 and 5433
  PublishSecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: OrchestratorSecurityGroup
      FromPort: '4503'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'
  PublishSecurityGroupIngress6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: OrchestratorSecurityGroup
      FromPort: '5433'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'

  # Allow tcp outbound on 80 and 443 to Publish Dispatcher Security Group
  PublishSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishDispatcherSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound on port 80 and 443 (http and https) to specified cidr ip required to download user data init script
  PublishSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  PublishSecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: PublishSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Author Security Group
  AuthorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Author Security Group
      Tags:
        - Key: Name
          Value: AEM Author Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Author ELB Security Group on 4502 and 5432
  AuthorSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: '4502'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '4502'
  AuthorSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: '5432'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '5432'

  # Allow tcp inbound from Author Security Group on 4502, 5432 and 8023 (tarmk cold standby)
  AuthorSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '4502'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '4502'
  AuthorSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '5432'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '5432'
  AuthorSecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '8023'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '8023'

  # Allow tcp inbound from Secure Shell Cidr on port 22
  AuthorSecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: '22'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '22'

  # Allow tcp outbound on 4503 and 5433 to Publish Security Group
  AuthorSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '4503'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'
  AuthorSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '5433'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'

  # Allow tcp outbound to Author Security Group on 4502, 5432 and 8023 (tarmk cold standby)
  AuthorSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '4502'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '4502'
  AuthorSecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '5432'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '5432'
  AuthorSecurityGroupEgress4:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '8023'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '8023'

  # Allow tcp outbound to Author Dispatcher Security Group on 80 and 443
  AuthorSecurityGroupEgress5:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorSecurityGroupEgress6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound on port 80 and 443 (http and https) to specified cidr ip required to download user data init script
  AuthorSecurityGroupEgress7:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorSecurityGroupEgress8:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: AuthorSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Author ELB Security Group
  AuthorELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Author ELB Security Group
      Tags:
        - Key: Name
          Value: AEM Author ELB Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Author Dispatcher Security Group on 80 and 443
  AuthorELBSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorELBSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp inbound from Orchestrator Security Group on 80 and 443
  AuthorELBSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: OrchestratorSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorELBSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: OrchestratorSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound to Author Security Group on 4502 and 5432
  AuthorELBSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '4502'
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: '4502'
  AuthorELBSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '5432'
      GroupId:
        Ref: AuthorELBSecurityGroup
      IpProtocol: tcp
      ToPort: '5432'

  # Author Dispatcher Security Group
  AuthorDispatcherSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Author Dispatcher Security Group
      Tags:
        - Key: Name
          Value: AEM Author Dispatcher Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Author Dispatcher ELB Security Group on 80 and 443
  AuthorDispatcherSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorDispatcherSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp inbound from Author Security Group on 4502 and 5432
  AuthorDispatcherSecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '4502'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '4502'
  AuthorDispatcherSecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Ref: AuthorSecurityGroup
      FromPort: '5432'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '5432'

  # Allow tcp inbound from Secure Shell Cidr on port 22
  AuthorDispatcherSecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: '22'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '22'

  # Allow tcp outbound to Author ELB Security Group on 80 and 443
  AuthorDipatcherSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'
  AuthorDipatcherSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound on port 80 and 443 (http and https) to specified cidr ip required to download user data init script
  AuthorDipatcherSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorDipatcherSecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: AuthorDispatcherSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Author Dispatcher ELB Security Group
  AuthorDispatcherELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Author Dispatcher ELB Security Group
      Tags:
        - Key: Name
          Value: AEM Author Dispatcher ELB Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Author Dispatcher ELB Cidr Ip on 80 and 443
  AuthorDispatcherELBSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: AuthorDispatcherELBSecurityGroupInboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorDispatcherELBSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: AuthorDispatcherELBSecurityGroupInboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound to Author Dispatcher Security Group on 80 and 443
  AuthorDipatcherELBSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  AuthorDipatcherELBSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorDispatcherSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: AuthorDispatcherELBSecurityGroup
      IpProtocol: tcp
      ToPort: '443'


  # Orchestrator Security Group
  OrchestratorSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Orchestrator Security Group
      Tags:
        - Key: Name
          Value: AEM Orchestrator Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Secure Shell Cidr Ip on port 22
  OrchestratorSecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: '22'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '22'

  # Allow tcp outbound to Author ELB Security Group on 80 and 443
  OrchestratorSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: '80'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '80'
  OrchestratorSecurityGroupEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: AuthorELBSecurityGroup
      FromPort: '443'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound on port 80 and 443 (http and https) to specified cidr ip required to download user data init script
  OrchestratorSecurityGroupEgress3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '80'
  OrchestratorSecurityGroupEgress4:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '443'

  # Allow tcp outbound to Publish Security Group on 4503 and 5433
  OrchestratorSecurityGroupEgress5:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '4503'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '4503'
  OrchestratorSecurityGroupEgress6:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      DestinationSecurityGroupId:
        Ref: PublishSecurityGroup
      FromPort: '5433'
      GroupId:
        Ref: OrchestratorSecurityGroup
      IpProtocol: tcp
      ToPort: '5433'

  # Chaos Monkey Security Group
  ChaosMonkeySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AEM Chaos Monkey Security Group
      Tags:
        - Key: Name
          Value: AEM Chaos Monkey Security Group
        - Key: StackPrefix
          Value:
            Ref: ComputeStackPrefixParameter
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackPrefixParameter}-VPCId

  # Allow tcp inbound from Secure Shell Cidr Ip on port 22
  ChaosMonkeySecurityGroupIngress0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp:
        Ref: SecureShellInboundCidrIpParameter
      FromPort: '22'
      GroupId:
        Ref: ChaosMonkeySecurityGroup
      IpProtocol: tcp
      ToPort: '22'

  # Allow tcp outbound on port 80 and 443 (http and https) to specified cidr ip required to download user data init script
  ChaosSecurityGroupEgress0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '80'
      GroupId:
        Ref: ChaosMonkeySecurityGroup
      IpProtocol: tcp
      ToPort: '80'

  ChaosSecurityGroupEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      CidrIp:
        Ref: PrivateSubnetInternetOutboundCidrIpParameter
      FromPort: '443'
      GroupId:
        Ref: ChaosMonkeySecurityGroup
      IpProtocol: tcp
      ToPort: '443'

Outputs:

  AuthorPublishDispatcherSecurityGroup:
    Value:
      Ref: AuthorPublishDispatcherSecurityGroup
    Description: The Author Publish Dispatcher Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-AuthorPublishDispatcherSecurityGroup

  PublishDispatcherELBSecurityGroup:
    Value:
      Ref: PublishDispatcherELBSecurityGroup
    Description: The Publish Dispatcher ELB Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-PublishDispatcherELBSecurityGroup

  PublishDispatcherSecurityGroup:
    Value:
      Ref: PublishDispatcherSecurityGroup
    Description: The Publish Dispatcher Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-PublishDispatcherSecurityGroup

  PublishSecurityGroup:
    Value:
      Ref: PublishSecurityGroup
    Description: The Publish Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-PublishSecurityGroup

  AuthorSecurityGroup:
    Value:
      Ref: AuthorSecurityGroup
    Description: The Author Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-AuthorSecurityGroup

  AuthorELBSecurityGroup:
    Value:
      Ref: AuthorELBSecurityGroup
    Description: The Author ELB Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-AuthorELBSecurityGroup

  AuthorDispatcherSecurityGroup:
    Value:
      Ref: AuthorDispatcherSecurityGroup
    Description: The Author Dispatcher Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-AuthorDispatcherSecurityGroup

  AuthorDispatcherELBSecurityGroup:
    Value:
      Ref: AuthorDispatcherELBSecurityGroup
    Description: The Author Dispatcher ELB Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-AuthorDispatcherELBSecurityGroup

  OrchestratorSecurityGroup:
    Value:
      Ref: OrchestratorSecurityGroup
    Description: The Orchestrator Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-OrchestratorSecurityGroup

  ChaosMonkeySecurityGroup:
    Value:
      Ref: ChaosMonkeySecurityGroup
    Description: The Chaos Monkey Security Group
    Export:
      Name:
        Fn::Sub: ${ComputeStackPrefixParameter}-ChaosMonkeySecurityGroup
